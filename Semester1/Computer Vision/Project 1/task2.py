###############
##Design the function "calibrate" to  return 
# (1) intrinsic_params: should be a list with four elements: [f_x, f_y, o_x, o_y], where f_x and f_y is focal length, o_x and o_y is offset;
# (2) is_constant: should be bool data type. False if the intrinsic parameters differed from world coordinates. 
#                                            True if the intrinsic parameters are invariable.
#It is ok to add other functions if you need
###############

import numpy as np
from cv2 import imread, cvtColor, COLOR_BGR2GRAY, TERM_CRITERIA_EPS, TERM_CRITERIA_MAX_ITER, \
    findChessboardCorners, cornerSubPix, drawChessboardCorners

def calibrate(imgname):
    
    im=imread(imgname)
    ret, corners=findChessboardCorners(im,(4,9),None)
    
    #Manually compiled world coordinate array
    A=np.array([40,0,40,1,0,0,0,0,-48060.9320,0,-48060.9320,-1201.52330,0,0,0,0,40,0,40,1,-25899.9268,0,-25899.9268,-647.49817,40,0,30,1,0,0,0,0,-48001.3080,0,-36000.9810,-1200.03270,0,0,0,0,40,0,30,1,-28577.2200,0,-21432.9150,-714.43050,40,0,20,1,0,0,0,0,-47901.4120,0,-23950.7060,-1197.53530,0,0,0,0,40,0,20,1,-31245.9544,0,-15622.9772,-781.14886,40,0,10,1,0,0,0,0,-47896.0560,0,-11974.0140,-1197.40140,0,0,0,0,40,0,10,1,-33803.4040,0,-8450.8510,-845.08510,30,0,40,1,0,0,0,0,-34589.2500,0,-46119.0000,-1152.97500,0,0,0,0,30,0,40,1,-19864.1490,0,-26485.5320,-662.13830,30,0,30,1,0,0,0,0,-34580.8920,0,-34580.8920,-1152.69640,0,0,0,0,30,0,30,1,-21846.1248,0,-21846.1248,-728.20416,30,0,20,1,0,0,0,0,-34522.1250,0,-23014.7500,-1150.73750,0,0,0,0,30,0,20,1,-23881.5948,0,-15921.0632,-796.05316,30,0,10,1,0,0,0,0,-34521.8070,0,-11507.2690,-1150.72690,0,0,0,0,30,0,10,1,-25828.5360,0,-8609.5120,-860.95120,20,0,40,1,0,0,0,0,-22048.7840,0,-44097.5680,-1102.43920,0,0,0,0,20,0,40,1,-13529.7766,0,-27059.5532,-676.48883,20,0,30,1,0,0,0,0,-22045.6760,0,-33068.5140,-1102.28380,0,0,0,0,20,0,30,1,-14906.7380,0,-22360.1070,-745.33690,20,0,20,1,0,0,0,0,-22007.1900,0,-22007.1900,-1100.35950,0,0,0,0,20,0,20,1,-16275.9290,0,-16275.9290,-813.79645,20,0,10,1,0,0,0,0,-22010.4720,0,-11005.2360,-1100.52360,0,0,0,0,20,0,10,1,-17593.4440,0,-8796.7220,-879.67220,10,0,40,1,0,0,0,0,-10520.0000,0,-42080.0000,-1052.00000,0,0,0,0,10,0,40,1,-6940.0000,0,-27760.0000,-694.00000,10,0,30,1,0,0,0,0,-10505.0520,0,-31515.1560,-1050.50520,0,0,0,0,10,0,30,1,-7610.9880,0,-22832.9640,-761.09880,10,0,20,1,0,0,0,0,-10499.6860,0,-20999.3720,-1049.96860,0,0,0,0,10,0,20,1,-8301.6250,0,-16603.2500,-830.16250,10,0,10,1,0,0,0,0,-10492.8220,0,-10492.8220,-1049.28220,0,0,0,0,10,0,10,1,-8987.7264,0,-8987.7264,-898.77264,0,10,40,1,0,0,0,0,0,-9476.2490,-37904.9960,-947.62490,0,0,0,0,0,10,40,1,0,-6915.3590,-27661.4360,-691.53590,0,10,30,1,0,0,0,0,0,-9467.0715,-28401.2145,-946.70715,0,0,0,0,0,10,30,1,0,-7606.6850,-22820.0550,-760.66850,0,10,20,1,0,0,0,0,0,-9464.6510,-18929.3020,-946.46510,0,0,0,0,0,10,20,1,0,-8280.0080,-16560.0160,-828.00080,0,10,10,1,0,0,0,0,0,-9479.1570,-9479.1570,-947.91570,0,0,0,0,0,10,10,1,0,-8969.7770,-8969.7770,-896.97770,0,20,40,1,0,0,0,0,0,-17954.4200,-35908.8400,-897.72100,0,0,0,0,0,20,40,1,0,-13502.1314,-27004.2628,-675.10657,0,20,30,1,0,0,0,0,0,-17992.6990,-26989.0485,-899.63495,0,0,0,0,0,20,30,1,0,-14878.3000,-22317.4500,-743.91500,0,20,20,1,0,0,0,0,0,-17996.2792,-17996.2792,-899.81396,0,0,0,0,0,20,20,1,0,-16208.5920,-16208.5920,-810.42960,0,20,10,1,0,0,0,0,0,-18009.2480,-9004.6240,-900.46240,0,0,0,0,0,20,10,1,0,-17551.6028,-8775.8014,-877.58014,0,30,40,1,0,0,0,0,0,-25577.0709,-34102.7612,-852.56903,0,0,0,0,0,30,40,1,0,-19808.5839,-26411.4452,-660.28613,0,30,30,1,0,0,0,0,0,-25578.4515,-25578.4515,-852.61505,0,0,0,0,0,30,30,1,0,-21790.1460,-21790.1460,-726.33820,0,30,20,1,0,0,0,0,0,-25573.9500,-17049.3000,-852.46500,0,0,0,0,0,30,20,1,0,-23759.9100,-15839.9400,-791.99700,0,30,10,1,0,0,0,0,0,-25634.0955,-8544.6985,-854.46985,0,0,0,0,0,30,10,1,0,-25762.4415,-8587.4805,-858.74805,0,40,40,1,0,0,0,0,0,-32269.6040,-32269.6040,-806.74010,0,0,0,0,0,40,40,1,0,-25760.5840,-25760.5840,-644.01460,0,40,30,1,0,0,0,0,0,-32270.7104,-24203.0328,-806.76776,0,0,0,0,0,40,30,1,0,-28392.8468,-21294.6351,-709.82117,0,40,20,1,0,0,0,0,0,-32361.0720,-16180.5360,-809.02680,0,0,0,0,0,40,20,1,0,-31048.7960,-15524.3980,-776.21990,0,40,10,1,0,0,0,0,0,-32378.1240,-8094.5310,-809.45310,0,0,0,0,0,40,10,1,0,-33586.5260,-8396.6315,-839.66315]).reshape(64,12)
    
    #Applying SVD on 'A'
    U,S,Vt=np.linalg.svd(A)
    
    #Storing the last row of Vt in x
    x=Vt[-1]
    
    #Calculating lambda using x31(x[8]), x32(x[9] and x33(x[10])
    lambda_value=1/(np.sqrt(np.square(x[8])+np.square(x[9])+np.square(x[10])))
    m=np.dot(lambda_value,x)
    M=np.array(m).reshape(3,4)
    m1=np.array([M[0][0],M[0][1],M[0][2]]).transpose()
    m2=np.array([M[1][0],M[1][1],M[1][2]]).transpose()
    m3=np.array([M[2][0],M[2][1],M[2][2]]).transpose()
    
    #Applying formulae to calculate the intrinsic parameters
    o_x=np.dot(np.transpose(m1),m3)
    o_y=np.dot(np.transpose(m2),m3)
    f_x=np.sqrt(np.dot(np.transpose(m1),m1)-np.square(o_x))
    f_y=np.sqrt(np.dot(np.transpose(m2),m2)-np.square(o_y))
    
    #Final result
    intrinsic_params=[f_x,f_y,o_x,o_y]
    is_constant=True
    return intrinsic_params,is_constant

if __name__ == "__main__":
    intrinsic_params, is_constant = calibrate('checkboard.png')
    print(intrinsic_params)
    print(is_constant)